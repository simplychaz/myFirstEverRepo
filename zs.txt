 public class JsonConfigurationProvider2 : JsonConfigurationProvider {
     public JsonConfigurationProvider2(JsonConfigurationSource2 source) : base(source) {
     }

     public override void Load(Stream stream) {
         // Let the base class do the heavy lifting.
         base.Load(stream);

         // Do decryption here, you can tap into the Data property like so:

         // Data["abc:password"] = MyEncryptionLibrary.Decrypt(Data["abc:password"]);

         Data["MyAppkeys:ANAPI"] = "test";

         var p = Data["ClearTextPassword"];

         // But you have to make your own MyEncryptionLibrary, not included here
     }
 }

 public class JsonConfigurationSource2 : JsonConfigurationSource {
     public override IConfigurationProvider Build(IConfigurationBuilder builder) {
         EnsureDefaults(builder);
         return new JsonConfigurationProvider2(this);
     }
 }

 public static class JsonConfigurationExtensions2 {
     public static IConfigurationBuilder AddJsonFile2(this IConfigurationBuilder builder, string path, bool optional,
         bool reloadOnChange) {
         if (builder == null) {
             throw new ArgumentNullException(nameof(builder));
         }
         if (string.IsNullOrEmpty(path)) {
             throw new ArgumentException("File path must be a non-empty string.");
         }

         var source = new JsonConfigurationSource2 {
             FileProvider = null,
             Path = path,
             Optional = optional,
             ReloadOnChange = reloadOnChange
         };

         source.ResolveFileProvider();
         builder.Add(source);
         return builder;
     }
 }
